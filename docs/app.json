[{"name": "app.py", "content": "import plotly.express as px\nfrom shiny import App, ui, render, reactive\nfrom shinywidgets import output_widget, render_widget\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\n\npenguins_df = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.sidebar(\n            ui.h2(\"Sidebar\"),\n            ui.input_selectize(\n                \"selected_attribute\",\n                \"Select attribute\",\n                [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]\n            ),\n            ui.input_numeric(\n                \"plotly_bin_count\",\n                \"Plotly Histogram Bins\",\n                value=20\n            ),\n            ui.input_slider(\n                \"seaborn_bin_count\",\n                \"Seaborn Histogram Bins\",\n                5, 40, 17\n            ),\n            ui.input_checkbox_group(\n                \"selected_species_list\",\n                \"Species\",\n                [\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n                selected=[\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n                inline=True\n            ),\n            ui.input_checkbox_group(\n                \"selected_island_list\",\n                \"Island\",\n                [\"Torgersen\", \"Biscoe\", \"Dream\"],\n                selected=[\"Torgersen\", \"Biscoe\", \"Dream\"],\n                inline=True\n            ),\n            ui.hr(),\n            ui.a(\n                \"GitHub\",\n                href=\"https://github.com/sydsailors/cintel-02-data\",\n                target=\"_blank\"\n            ),\n            open=\"open\"\n        ),\n        ui.layout_columns(\n            ui.output_data_frame(\"data_table\"),\n            ui.output_data_frame(\"data_grid\")\n        ),\n        ui.layout_columns(\n            output_widget(\"plotly_histogram\"),\n            ui.output_plot(\"seaborn_histogram\"),\n            ui.card(\n                ui.card_header(\"Plotly Scatterplot: Species\"),\n                output_widget(\"plotly_scatterplot\"),\n                full_screen=True\n            )\n        )\n    )\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def data_table():\n        return penguins_df\n\n    @render.data_frame\n    def data_grid():\n        return penguins_df\n\n    @render_widget\n    def plotly_histogram():\n        col = input.selected_attribute()\n        bins = input.plotly_bin_count()\n        if not bins:\n            bins = 17\n        fig = px.histogram(\n            filtered_data(),\n            x=col,\n            nbins=int(bins),\n            color=\"species\",\n            title=f\"Plotly Histogram of {col}\"\n        )\n        return fig\n\n    @render.plot\n    def seaborn_histogram():\n        col = input.selected_attribute()\n        bins = input.seaborn_bin_count()\n        if not bins:\n            bins = 17\n        fig, ax = plt.subplots()\n        sns.histplot(\n            data=filtered_data(),\n            x=col,\n            bins=int(bins),\n            hue=\"species\",\n            ax=ax\n        )\n        ax.set_title(f\"Seaborn Histogram of {col}\")\n        return fig\n\n    @render_widget\n    def plotly_scatterplot():\n        fig = px.scatter(\n            filtered_data(),\n            x=\"bill_length_mm\",\n            y=\"body_mass_g\",\n            color=\"species\",\n            symbol=\"species\",\n            hover_data=[\"island\"],\n            labels={\n                \"bill_length_mm\": \"Bill Length (mm)\",\n                \"body_mass_g\": \"Body Mass (g)\"\n            },\n            title=\"Bill Length vs Body Mass by Species\"\n        )\n        return fig\n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n# Add a reactive calculation to filter the data\n# By decorating the function with @reactive, we can use the function to filter the data\n# The function will be called whenever an input functions used to generate that output changes.\n# Any output that depends on the reactive function (e.g., filtered_data()) will be updated when the data changes. \n\n    @reactive.calc\n    def filtered_data():\n        isSpeciesmatch = penguins_df[\"species\"].isin(input.selected_species_list())\n        isIslandmatch = penguins_df[\"island\"].isin(input.selected_island_list())\n        return penguins_df[isSpeciesmatch & isIslandmatch]\n\napp = App(app_ui, server)\n", "type": "text"}]